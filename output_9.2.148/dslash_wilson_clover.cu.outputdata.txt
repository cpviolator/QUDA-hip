find: unknown predicate `-cuda-path=/sw/summit/cuda/9.2.148'
In file included from /tmp/dslash_wilson_clover.cu-3ef2a5.hip:4:
./quda/include/dslash.h:432:71: error: use of undeclared identifier 'QUDA_RECONSTRUCT'
      errorQuda("QUDA_RECONSTRUCT=%d does not enable reconstruct-18", QUDA_RECONSTRUCT);
                                                                      ^
./quda/include/dslash.h:438:71: error: use of undeclared identifier 'QUDA_RECONSTRUCT'
      errorQuda("QUDA_RECONSTRUCT=%d does not enable reconstruct-12", QUDA_RECONSTRUCT);
                                                                      ^
./quda/include/dslash.h:444:71: error: use of undeclared identifier 'QUDA_RECONSTRUCT'
      errorQuda("QUDA_RECONSTRUCT=%d does not enable reconstruct-12", QUDA_RECONSTRUCT);
                                                                      ^
./quda/include/dslash.h:482:71: error: use of undeclared identifier 'QUDA_PRECISION'
      errorQuda("QUDA_PRECISION=%d does not enable double precision", QUDA_PRECISION);
                                                                      ^
./quda/include/dslash.h:488:71: error: use of undeclared identifier 'QUDA_PRECISION'
      errorQuda("QUDA_PRECISION=%d does not enable single precision", QUDA_PRECISION);
                                                                      ^
./quda/include/dslash.h:494:69: error: use of undeclared identifier 'QUDA_PRECISION'
      errorQuda("QUDA_PRECISION=%d does not enable half precision", QUDA_PRECISION);
                                                                    ^
./quda/include/dslash.h:500:72: error: use of undeclared identifier 'QUDA_PRECISION'
      errorQuda("QUDA_PRECISION=%d does not enable quarter precision", QUDA_PRECISION);
                                                                       ^
7 errors generated when compiling for host.
Error while processing /tmp/dslash_wilson_clover.cu-3ef2a5.hip.

[HIPIFY] info: file './quda/lib/dslash_wilson_clover.cu' statistics:

  ERROR: Statistics is invalid due to failed hipification.

  CONVERTED refs count: 2
  UNCONVERTED refs count: 0
  CONVERSION %: 100
  REPLACED bytes: 24
  TOTAL bytes: 4826
  CHANGED lines of code: 3
  TOTAL lines of code: 141
  CODE CHANGED (in bytes) %: 0
  CODE CHANGED (in lines) %: 2
  TIME ELAPSED s: 1.89
[HIPIFY] info: CONVERTED refs by type:
  type: 2
[HIPIFY] info: CONVERTED refs by API:
  CUDA RT API: 2
[HIPIFY] info: CONVERTED refs by names:
  cudaStream_t: 2
17,32c17
<   /**
<      @brief This is a helper class that is used to instantiate the
<      correct templated kernel for the dslash.
<    */
<   template <typename Float, int nDim, int nColor, int nParity, bool dagger, bool xpay, KernelType kernel_type, typename Arg>
<   struct WilsonCloverLaunch {
<     static constexpr const char *kernel = "quda::wilsonCloverGPU"; // kernel name for jit compilation
<     template <typename Dslash>
<     inline static void launch(Dslash &dslash, TuneParam &tp, Arg &arg, const cudaStream_t &stream)
<     {
<       static_assert(xpay == true, "wilsonClover operator only defined for xpay");
<       dslash.launch(wilsonCloverGPU<Float, nDim, nColor, nParity, dagger, xpay, kernel_type, Arg>, tp, arg, stream);
<     }
<   };
< 
<   template <typename Float, int nDim, int nColor, typename Arg> class WilsonClover : public Dslash<Float>
---
>   template <typename Arg> class WilsonClover : public Dslash<wilsonClover, Arg>
33a19,21
>     using Dslash = Dslash<wilsonClover, Arg>;
>     using Dslash::arg;
>     using Dslash::in;
35,47c23,24
< protected:
<     Arg &arg;
<     const ColorSpinorField &in;
< 
< public:
<     WilsonClover(Arg &arg, const ColorSpinorField &out, const ColorSpinorField &in) :
<         Dslash<Float>(arg, out, in, "kernels/dslash_wilson_clover.cuh"),
<         arg(arg),
<         in(in)
<     {
<     }
< 
<     virtual ~WilsonClover() {}
---
>   public:
>     WilsonClover(Arg &arg, const ColorSpinorField &out, const ColorSpinorField &in) : Dslash(arg, out, in) {}
52c29
<       Dslash<Float>::setParam(arg);
---
>       Dslash::setParam(tp);
54c31
<         Dslash<Float>::template instantiate<WilsonCloverLaunch, nDim, nColor, true>(tp, arg, stream);
---
>         Dslash::template instantiate<packShmem, true>(tp, stream);
62c39,40
<       long long flops = Dslash<Float>::flops();
---
>       long long flops = Dslash::flops();
> 
64,68d41
<       case EXTERIOR_KERNEL_X:
<       case EXTERIOR_KERNEL_Y:
<       case EXTERIOR_KERNEL_Z:
<       case EXTERIOR_KERNEL_T:
<       case EXTERIOR_KERNEL_ALL: break; // all clover flops are in the interior kernel
70a44
>       default: break; // all clover flops are in the interior kernel
78a53
>       long long bytes = Dslash::bytes();
80d54
<       long long bytes = Dslash<Float>::bytes();
82,86d55
<       case EXTERIOR_KERNEL_X:
<       case EXTERIOR_KERNEL_Y:
<       case EXTERIOR_KERNEL_Z:
<       case EXTERIOR_KERNEL_T:
<       case EXTERIOR_KERNEL_ALL: break;
88a58
>       default: break;
93,97d62
< 
<     TuneKey tuneKey() const
<     {
<       return TuneKey(in.VolString(), typeid(*this).name(), Dslash<Float>::aux[arg.kernel_type]);
<     }
106,107c71,72
<       WilsonCloverArg<Float, nColor, recon> arg(out, in, U, A, a, 0.0, x, parity, dagger, comm_override);
<       WilsonClover<Float, nDim, nColor, WilsonCloverArg<Float, nColor, recon>> wilson(arg, out, in);
---
>       WilsonCloverArg<Float, nColor, nDim, recon> arg(out, in, U, A, a, 0.0, x, parity, dagger, comm_override);
>       WilsonClover<decltype(arg)> wilson(arg, out, in);
