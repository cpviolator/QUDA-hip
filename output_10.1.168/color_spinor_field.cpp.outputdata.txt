find: unknown predicate `-cuda-path=/sw/summit/cuda/10.1.168'
In file included from <built-in>:1:
/sw/summit/hip/hip2.6-cuda10.1.168/llvm/lib/clang/8.0.1/include/__clang_cuda_runtime_wrapper.h:66:2: error: "Unsupported CUDA version!"
#error "Unsupported CUDA version!"
 ^
1 error generated when compiling for host.
Error while processing /tmp/color_spinor_field.cpp-2dbecd.hip.

[HIPIFY] info: file './quda/lib/color_spinor_field.cpp' statistics:

  ERROR: Statistics is invalid due to failed hipification.

  CONVERTED refs count: 8
  UNCONVERTED refs count: 0
  CONVERSION %: 100
  REPLACED bytes: 180
  TOTAL bytes: 34689
  CHANGED lines of code: 9
  TOTAL lines of code: 894
  CODE CHANGED (in bytes) %: 1
  CODE CHANGED (in lines) %: 1
  TIME ELAPSED s: 0.79
[HIPIFY] info: CONVERTED refs by type:
  numeric_literal: 8
[HIPIFY] info: CONVERTED refs by API:
  CUDA RT API: 8
[HIPIFY] info: CONVERTED refs by names:
  cudaMemcpyDeviceToDevice: 2
  cudaMemcpyDeviceToHost: 3
  cudaMemcpyHostToDevice: 3
779a780,811
>   ColorSpinorField* ColorSpinorField::CreateAlias(const ColorSpinorParam &param_)
>   {
>     if (param_.Precision() > precision) errorQuda("Cannot create an alias to source with lower precision than the alias");
>     ColorSpinorParam param(param_);
>     param.create = QUDA_REFERENCE_FIELD_CREATE;
>     param.v = V();
> 
>     // if norm field in the source exists, use it, else use the second
>     // half of main field for norm storage, ensuring that the start of
>     // the norm field is on an alignment boundary if we're using an
>     // internal field
>     if (param.Precision() < QUDA_SINGLE_PRECISION) {
>       auto norm_offset = (isNative() || fieldOrder == QUDA_FLOAT2_FIELD_ORDER) ?
>         (siteSubset == QUDA_FULL_SITE_SUBSET) ? 2*ALIGNMENT_ADJUST(Bytes()/4) : ALIGNMENT_ADJUST(Bytes()/2) : 0;
>       param.norm = Norm() ? Norm() : static_cast<char*>(V()) + norm_offset;
>     }
> 
>     auto alias = ColorSpinorField::Create(param);
> 
>     if (alias->Bytes() > Bytes()) errorQuda("Alias footprint %lu greater than source %lu", alias->Bytes(), Bytes());
>     if (alias->Precision() < QUDA_SINGLE_PRECISION) {
>       // check that norm does not overlap with body
>       if (static_cast<char*>(alias->V()) + alias->Bytes() > alias->Norm())
>         errorQuda("Overlap between alias body and norm");
>       // check that norm does fall off the end
>       if (static_cast<char*>(alias->Norm()) + alias->NormBytes() > static_cast<char*>(V()) + Bytes())
>         errorQuda("Norm is not contained in the srouce field");
>     }
> 
>     return alias;
>   }
> 
