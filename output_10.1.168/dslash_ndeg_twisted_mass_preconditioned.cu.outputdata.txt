find: unknown predicate `-cuda-path=/sw/summit/cuda/10.1.168'
In file included from <built-in>:1:
/sw/summit/hip/hip2.6-cuda10.1.168/llvm/lib/clang/8.0.1/include/__clang_cuda_runtime_wrapper.h:66:2: error: "Unsupported CUDA version!"
#error "Unsupported CUDA version!"
 ^
In file included from /tmp/dslash_ndeg_twisted_mass_preconditioned.cu-054a7b.hip:3:
./quda/include/dslash.h:432:71: error: use of undeclared identifier 'QUDA_RECONSTRUCT'
      errorQuda("QUDA_RECONSTRUCT=%d does not enable reconstruct-18", QUDA_RECONSTRUCT);
                                                                      ^
./quda/include/dslash.h:438:71: error: use of undeclared identifier 'QUDA_RECONSTRUCT'
      errorQuda("QUDA_RECONSTRUCT=%d does not enable reconstruct-12", QUDA_RECONSTRUCT);
                                                                      ^
./quda/include/dslash.h:444:71: error: use of undeclared identifier 'QUDA_RECONSTRUCT'
      errorQuda("QUDA_RECONSTRUCT=%d does not enable reconstruct-12", QUDA_RECONSTRUCT);
                                                                      ^
./quda/include/dslash.h:482:71: error: use of undeclared identifier 'QUDA_PRECISION'
      errorQuda("QUDA_PRECISION=%d does not enable double precision", QUDA_PRECISION);
                                                                      ^
./quda/include/dslash.h:488:71: error: use of undeclared identifier 'QUDA_PRECISION'
      errorQuda("QUDA_PRECISION=%d does not enable single precision", QUDA_PRECISION);
                                                                      ^
./quda/include/dslash.h:494:69: error: use of undeclared identifier 'QUDA_PRECISION'
      errorQuda("QUDA_PRECISION=%d does not enable half precision", QUDA_PRECISION);
                                                                    ^
./quda/include/dslash.h:500:72: error: use of undeclared identifier 'QUDA_PRECISION'
      errorQuda("QUDA_PRECISION=%d does not enable quarter precision", QUDA_PRECISION);
                                                                       ^
In file included from /tmp/dslash_ndeg_twisted_mass_preconditioned.cu-054a7b.hip:7:
In file included from ./quda/include/kernels/dslash_ndeg_twisted_mass_preconditioned.cuh:3:
In file included from ./quda/include/kernels/dslash_wilson.cuh:4:
In file included from ./quda/include/color_spinor_field_order.h:26:
In file included from ./quda/include/thrust_helper.cuh:8:
In file included from /sw/summit/cuda/10.1.168/include/thrust/system/cuda/vector.h:25:
In file included from /sw/summit/cuda/10.1.168/include/thrust/system/cuda/memory.h:25:
In file included from /sw/summit/cuda/10.1.168/include/thrust/memory.h:25:
In file included from /sw/summit/cuda/10.1.168/include/thrust/detail/reference.h:173:
In file included from /sw/summit/cuda/10.1.168/include/thrust/detail/reference.inl:24:
In file included from /sw/summit/cuda/10.1.168/include/thrust/system/detail/adl/assign_value.h:42:
In file included from /sw/summit/cuda/10.1.168/include/thrust/system/cuda/detail/assign_value.h:24:
In file included from /sw/summit/cuda/10.1.168/include/thrust/system/cuda/detail/copy.h:98:
In file included from /sw/summit/cuda/10.1.168/include/thrust/system/cuda/detail/internal/copy_device_to_device.h:34:
In file included from /sw/summit/cuda/10.1.168/include/thrust/system/cuda/detail/transform.h:35:
In file included from /sw/summit/cuda/10.1.168/include/thrust/system/cuda/detail/parallel_for.h:36:
In file included from /sw/summit/cuda/10.1.168/include/thrust/system/cuda/detail/core/agent_launcher.h:32:
/sw/summit/cuda/10.1.168/include/thrust/system/cuda/detail/core/triple_chevron_launch.h:71:8: error: use of undeclared identifier cudaConfigureCall
      k<<<grid, block, shared_mem, stream>>>(x0);
       ^
/sw/summit/cuda/10.1.168/include/thrust/system/cuda/detail/core/triple_chevron_launch.h:78:8: error: use of undeclared identifier cudaConfigureCall
      k<<<grid, block, shared_mem, stream>>>(x0,x1);
       ^
/sw/summit/cuda/10.1.168/include/thrust/system/cuda/detail/core/triple_chevron_launch.h:85:8: error: use of undeclared identifier cudaConfigureCall
      k<<<grid, block, shared_mem, stream>>>(x0,x1,x2);
       ^
/sw/summit/cuda/10.1.168/include/thrust/system/cuda/detail/core/triple_chevron_launch.h:92:8: error: use of undeclared identifier cudaConfigureCall
      k<<<grid, block, shared_mem, stream>>>(x0,x1,x2,x3);
       ^
/sw/summit/cuda/10.1.168/include/thrust/system/cuda/detail/core/triple_chevron_launch.h:99:8: error: use of undeclared identifier cudaConfigureCall
      k<<<grid, block, shared_mem, stream>>>(x0,x1,x2,x3,x4);
       ^
/sw/summit/cuda/10.1.168/include/thrust/system/cuda/detail/core/triple_chevron_launch.h:106:8: error: use of undeclared identifier cudaConfigureCall
      k<<<grid, block, shared_mem, stream>>>(x0,x1,x2,x3,x4,x5);
       ^
/sw/summit/cuda/10.1.168/include/thrust/system/cuda/detail/core/triple_chevron_launch.h:113:8: error: use of undeclared identifier cudaConfigureCall
      k<<<grid, block, shared_mem, stream>>>(x0,x1,x2,x3,x4,x5,x6);
       ^
/sw/summit/cuda/10.1.168/include/thrust/system/cuda/detail/core/triple_chevron_launch.h:120:8: error: use of undeclared identifier cudaConfigureCall
      k<<<grid, block, shared_mem, stream>>>(x0,x1,x2,x3,x4,x5,x6,x7);
       ^
/sw/summit/cuda/10.1.168/include/thrust/system/cuda/detail/core/triple_chevron_launch.h:127:8: error: use of undeclared identifier cudaConfigureCall
      k<<<grid, block, shared_mem, stream>>>(x0,x1,x2,x3,x4,x5,x6,x7,x8);
       ^
/sw/summit/cuda/10.1.168/include/thrust/system/cuda/detail/core/triple_chevron_launch.h:134:8: error: use of undeclared identifier cudaConfigureCall
      k<<<grid, block, shared_mem, stream>>>(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9);
       ^
/sw/summit/cuda/10.1.168/include/thrust/system/cuda/detail/core/triple_chevron_launch.h:141:8: error: use of undeclared identifier cudaConfigureCall
      k<<<grid, block, shared_mem, stream>>>(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,xA);
       ^
fatal error: too many errors emitted, stopping now [-ferror-limit=]
20 errors generated when compiling for host.
Error while processing /tmp/dslash_ndeg_twisted_mass_preconditioned.cu-054a7b.hip.

[HIPIFY] info: file './quda/lib/dslash_ndeg_twisted_mass_preconditioned.cu' statistics:

  ERROR: Statistics is invalid due to failed hipification.

  CONVERTED refs count: 2
  UNCONVERTED refs count: 0
  CONVERSION %: 100
  REPLACED bytes: 24
  TOTAL bytes: 6464
  CHANGED lines of code: 3
  TOTAL lines of code: 173
  CODE CHANGED (in bytes) %: 0
  CODE CHANGED (in lines) %: 2
  TIME ELAPSED s: 1.73
[HIPIFY] info: CONVERTED refs by type:
  type: 2
[HIPIFY] info: CONVERTED refs by API:
  CUDA RT API: 2
[HIPIFY] info: CONVERTED refs by names:
  cudaStream_t: 2
17,31c17,23
<   /**
<      @brief This is a helper class that is used to instantiate the
<      correct templated kernel for the dslash.
<    */
<   template <typename Float, int nDim, int nColor, int nParity, bool dagger, bool xpay, KernelType kernel_type, typename Arg>
<   struct NdegTwistedMassPreconditionedLaunch {
<     static constexpr const char *kernel = "quda::ndegTwistedMassPreconditionedGPU"; // kernel name for jit compilation
<     template <typename Dslash>
<     inline static void launch(Dslash &dslash, TuneParam &tp, Arg &arg, const cudaStream_t &stream)
<     {
<       static_assert(nParity == 1, "Non-degenerate twisted-mass operator only defined for nParity=1");
<       dslash.launch(ndegTwistedMassPreconditionedGPU<Float, nDim, nColor, nParity, dagger, xpay, kernel_type, Arg>, tp,
<           arg, stream);
<     }
<   };
---
>   // trait to ensure we don't instantiate asymmetric & xpay
>   template <bool symmetric> constexpr bool xpay_() { return true; }
>   template <> constexpr bool xpay_<true>() { return false; }
> 
>   // trait to ensure we don't instantiate asymmetric & !dagger
>   template <bool symmetric> constexpr bool not_dagger_() { return false; }
>   template <> constexpr bool not_dagger_<true>() { return true; }
33,34c25
<   template <typename Float, int nDim, int nColor, typename Arg>
<   class NdegTwistedMassPreconditioned : public Dslash<Float>
---
>   template <typename Arg> class NdegTwistedMassPreconditioned : public Dslash<nDegTwistedMassPreconditioned, Arg>
35a27,29
>     using Dslash = Dslash<nDegTwistedMassPreconditioned, Arg>;
>     using Dslash::arg;
>     using Dslash::in;
37,39c31
< protected:
<     Arg &arg;
<     const ColorSpinorField &in;
---
>   protected:
43c35
<       return shared ? 2 * nColor * 4 * sizeof(typename mapper<Float>::type) : 0;
---
>       return shared ? 2 * in.Ncolor() * 4 * sizeof(typename mapper<typename Arg::Float>::type) : 0;
46c38
< public:
---
>   public:
48,51c40,41
<         Dslash<Float>(arg, out, in, "kernels/dslash_ndeg_twisted_mass_preconditioned.cuh"),
<         arg(arg),
<         in(in),
<         shared(arg.asymmetric || !arg.dagger)
---
>       Dslash(arg, out, in),
>       shared(arg.asymmetric || !arg.dagger)
54,56c44
<       if (arg.asymmetric)
<         for (int i = 0; i < 8; i++)
<           if (i != 4) { strcat(Dslash<Float>::aux[i], ",asym"); }
---
>       if (shared) TunableVectorY::resizeStep(2); // this will force flavor to be contained in the block
59,60d46
<     virtual ~NdegTwistedMassPreconditioned() {}
< 
64c50
<       Dslash<Float>::setParam(arg);
---
>       Dslash::setParam(tp);
66a53
>       if (arg.nParity != 1) errorQuda("Preconditioned non-degenerate twisted-mass operator not defined nParity=%d", arg.nParity);
68c55
<       if (arg.nParity == 1) {
---
>       if (arg.dagger) {
70,71c57
<           Dslash<Float>::template instantiate<NdegTwistedMassPreconditionedLaunch, nDim, nColor, 1, true>(
<               tp, arg, stream);
---
>           Dslash::template instantiate<packShmem, 1, true, xpay_<Arg::asymmetric>()>(tp, stream);
73,74c59
<           Dslash<Float>::template instantiate<NdegTwistedMassPreconditionedLaunch, nDim, nColor, 1, false>(
<               tp, arg, stream);
---
>           Dslash::template instantiate<packShmem, 1, true, false>(tp, stream);
76c61,64
<         errorQuda("Preconditioned non-degenerate twisted-mass operator not defined nParity=%d", arg.nParity);
---
>         if (arg.xpay)
>           Dslash::template instantiate<packShmem, 1, not_dagger_<Arg::asymmetric>(), xpay_<Arg::asymmetric>()>(tp, stream);
>         else
>           Dslash::template instantiate<packShmem, 1, not_dagger_<Arg::asymmetric>(), false>(tp, stream);
82,87c70,71
<       TunableVectorYZ::initTuneParam(param);
<       if (shared) {
<         param.block.y = 2; // flavor must be contained in the block
<         param.grid.y = 1;
<         param.shared_bytes = sharedBytesPerThread() * param.block.x * param.block.y * param.block.z;
<       }
---
>       Dslash::initTuneParam(param);
>       if (shared) param.shared_bytes = sharedBytesPerThread() * param.block.x * param.block.y * param.block.z;
92,97c76,77
<       TunableVectorYZ::defaultTuneParam(param);
<       if (shared) {
<         param.block.y = 2; // flavor must be contained in the block
<         param.grid.y = 1;
<         param.shared_bytes = sharedBytesPerThread() * param.block.x * param.block.y * param.block.z;
<       }
---
>       Dslash::defaultTuneParam(param);
>       if (shared) param.shared_bytes = sharedBytesPerThread() * param.block.x * param.block.y * param.block.z;
102c82
<       long long flops = Dslash<Float>::flops();
---
>       long long flops = Dslash::flops();
104,108d83
<       case EXTERIOR_KERNEL_X:
<       case EXTERIOR_KERNEL_Y:
<       case EXTERIOR_KERNEL_Z:
<       case EXTERIOR_KERNEL_T:
<       case EXTERIOR_KERNEL_ALL: break; // twisted-mass flops are in the interior kernel
111c86
<         flops += 2 * nColor * 4 * 4 * in.Volume(); // complex * Nc * Ns * fma * vol
---
>         flops += 2 * in.Ncolor() * 4 * 4 * in.Volume(); // complex * Nc * Ns * fma * vol
112a88
>       default: break; // twisted-mass flops are in the interior kernel
116,120d91
< 
<     TuneKey tuneKey() const
<     {
<       return TuneKey(in.VolString(), typeid(*this).name(), Dslash<Float>::aux[arg.kernel_type]);
<     }
130,132c101,103
<       NdegTwistedMassArg<Float, nColor, recon> arg(
<           out, in, U, a, b, c, xpay, x, parity, dagger, asymmetric, comm_override);
<       NdegTwistedMassPreconditioned<Float, nDim, nColor, NdegTwistedMassArg<Float, nColor, recon>> twisted(arg, out, in);
---
>       if (asymmetric) {
>         NdegTwistedMassArg<Float, nColor, nDim, recon, true> arg(out, in, U, a, b, c, xpay, x, parity, dagger, comm_override);
>         NdegTwistedMassPreconditioned<decltype(arg)> twisted(arg, out, in);
134c105
<       dslash::DslashPolicyTune<decltype(twisted)> policy(twisted,
---
>         dslash::DslashPolicyTune<decltype(twisted)> policy(twisted,
137c108,117
<       policy.apply(0);
---
>         policy.apply(0);
>       } else {
>         NdegTwistedMassArg<Float, nColor, nDim, recon, false> arg(out, in, U, a, b, c, xpay, x, parity, dagger, comm_override);
>         NdegTwistedMassPreconditioned<decltype(arg)> twisted(arg, out, in);
> 
>         dslash::DslashPolicyTune<decltype(twisted)> policy(twisted,
>           const_cast<cudaColorSpinorField *>(static_cast<const cudaColorSpinorField *>(&in)),
>           in.getDslashConstant().volume_4d_cb, in.getDslashConstant().ghostFaceCB, profile);
>         policy.apply(0);
>       }
